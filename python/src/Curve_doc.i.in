%feature("docstring") OT::Curve
"Curve.

Available constructors:
    Curve(*data, legend=' '*)

    Curve(*dataX, dataY, legend=' '*)

    Curve(*data, color, lineStyle, lineWidth, legend=' '*)

Parameters
----------
data : 2-d sequence of float
    Points from which the curve is built.
dataX, dataY : two 2-d sequences of floats
    Points from which the curve is built.
legend : str
    Legend of the Curve.
color : str
    Color of the curve. If not specified, by default it is the first color of the default palette.
lineStyle : str
    Style of the curve. If not specified, by default it is 'solid'.
lineWidth : float
    Width of the curve. If not specified, by default it is 1.

Examples
--------
>>> import openturns as ot
>>> from math import pi, sin
>>> # Generate the data for the curve to be drawn
>>> data = [[-3 * pi + 6 * pi * i / 100, sin(-3 * pi + 6 * pi * i / 100)] for i in range(100)]
>>> # Create an empty graph
>>> myGraph = ot.Graph('A curve', 'x', 'sin(x)', True, '')
>>> # Create the curve
>>> myCurve = ot.Curve(data, 'blue', 'solid', 2, '')
>>> myGraph.add(myCurve)"

// ---------------------------------------------------------------------

%define OT_Curve_FillBetween_doc
"Fill an area between two curves.

Parameters
----------
dataX : 2-d sequence of floats
    First coordinates common to the curves.
dataY1 : 2-d sequence of floats
    Second coordinates of the first curve.
dataY2 : 2-d sequence of floats
    Second coordinates of the second curve.

Returns
-------
polygon : :class:`~openturns.Polygon`
    Polygon which fills the surface between the two curves.

Examples
--------
>>> import openturns as ot
>>> from math import pi, sin
>>> # Generate the data for the curve to be drawn
>>> data = [[-3 * pi + 6 * pi * i / 100, sin(-3 * pi + 6 * pi * i / 100)] for i in range(100)]
>>> # Create the curve
>>> myCurve = ot.Curve(data, 'blue', 'solid', 2, '')
>>> # Create the polygon to fill between the curve and the x-axis
>>> x = [[xy[0]] for xy in data]
>>> y = [[xy[1]] for xy in data]
>>> myPolygon = ot.Curve.FillBetween(x, y, [[0.]] * len(data))
>>> # Create an empty graph
>>> myGraph = ot.Graph('A filled curve', 'x', 'sin(x)', True, '')
>>> # Add drawables into the graph
>>> myGraph.add(myCurve)
>>> myGraph.add(myPolygon)"

%enddef
%feature("docstring") OT::Curve::FillBetween
OT_Curve_FillBetween_doc
